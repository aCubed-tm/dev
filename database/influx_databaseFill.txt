CONNECT INFLUXDB:
~ docker exec -it influxdb influx -format=json
> connect 192.168.0.21:8086
> use Acubed
> [run query]


Serie:
Location

Tags:
Time = timestamp(int)
object = ref to hex uuid in neo4j
company = ref to hex uuid in neo4j

Values:
x = x-coordinate
y = y-coordinate
z = z-coordinate

Create query format: 
INSERT location,object=[objectUUID as int],company=[companyUUID as int] x=[x-value],y=[y-value],z=[z-value]


GetAllDataPerCompany:
SELECT time, x,y,z FROM "location" WHERE company = '[companyUID]' GROUP BY "object" ORDER BY time DESC LIMIT 1
example:
SELECT time, x,y,z FROM "location" WHERE company = '1' GROUP BY "object" ORDER BY time DESC LIMIT 1
return:
{
    "results":
    [
        {
            "series":
            [
                {
                    "name":"location",
                    "tags":
                        {
                            "object":"1"
                        },
                    "columns":["time","x","y","z"],
                    "values":[[1581593342132648161,4,5,1]]
                }
            ]
        }
    ]
}


Testdata location:
INSERT location,object=1,company=1 x=1,y=1,z=1
INSERT location,object=1,company=1 x=1,y=2,z=1
INSERT location,object=1,company=1 x=1,y=2,z=4
INSERT location,object=1,company=1 x=2,y=2,z=4
INSERT location,object=1,company=1 x=2,y=5,z=4
INSERT location,object=1,company=1 x=2,y=5,z=1
INSERT location,object=1,company=1 x=4,y=5,z=1


Serie:
Camera

Tags:
Time = timestamp(int)
camera = ref to hex uuid in neo4j
object = ref to hex uuid in neo4j

Values:
x = x-coordinate 
y = y-coordinate

Create query format:
INSERT camera,camera=[cameraUUID as int],object=[objectUUID] x=[x-value],y=[y-value]


Testdata camera:
INSERT camera,camera=1,object=1 x=3,y=4
INSERT camera,camera=2,object=1 x=7,y=9
INSERT camera,camera=3,object=1 x=5,y=7
INSERT camera,camera=1,object=1 x=6,y=4
INSERT camera,camera=2,object=1 x=8,y=7
INSERT camera,camera=3,object=1 x=8,y=6